// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order_service.proto

package ecommerce

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Order struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price                float32  `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_93a121d2d2ec3d32, []int{0}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Order) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Order) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Order)(nil), "ecommerce.Order")
}

func init() { proto.RegisterFile("order_service.proto", fileDescriptor_93a121d2d2ec3d32) }

var fileDescriptor_93a121d2d2ec3d32 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x49, 0x5d, 0x07, 0x7d, 0xd3, 0x21, 0x51, 0xa4, 0x14, 0x91, 0xe2, 0xa9, 0xa7, 0x6c,
	0x28, 0xde, 0xe7, 0xd1, 0x93, 0xb0, 0x81, 0x57, 0xc9, 0x92, 0xd7, 0x1a, 0x58, 0x9b, 0xf0, 0x92,
	0x4e, 0xc4, 0xbf, 0xc0, 0xff, 0x5a, 0x4c, 0xa7, 0x08, 0x05, 0xc1, 0x5b, 0xbe, 0xef, 0x7b, 0xef,
	0x97, 0xef, 0xc1, 0x99, 0x25, 0x8d, 0xf4, 0xec, 0x91, 0xf6, 0x46, 0xa1, 0x70, 0x64, 0x83, 0xe5,
	0x19, 0x2a, 0xdb, 0xb6, 0x48, 0x0a, 0x8b, 0xab, 0xc6, 0xda, 0x66, 0x87, 0x8b, 0x18, 0x6c, 0xfb,
	0x7a, 0xf1, 0x4a, 0xd2, 0x39, 0x24, 0x3f, 0x8c, 0x5e, 0xbf, 0x43, 0xfa, 0xf8, 0x45, 0xe0, 0x73,
	0x48, 0x8c, 0xce, 0x59, 0xc9, 0xaa, 0x6c, 0x9d, 0x18, 0xcd, 0x39, 0x4c, 0x3a, 0xd9, 0x62, 0x9e,
	0x44, 0x27, 0xbe, 0x79, 0x09, 0x33, 0x8d, 0x5e, 0x91, 0x71, 0xc1, 0xd8, 0x2e, 0x3f, 0x8a, 0xd1,
	0x6f, 0x8b, 0x9f, 0x43, 0xea, 0xc8, 0x28, 0xcc, 0x27, 0x25, 0xab, 0x92, 0xf5, 0x20, 0xf8, 0x05,
	0x4c, 0x7d, 0x90, 0xa1, 0xf7, 0x79, 0x1a, 0x57, 0x0e, 0xea, 0xe6, 0x23, 0x81, 0x2c, 0xfe, 0xfe,
	0xd0, 0xd5, 0x96, 0xaf, 0x60, 0xde, 0x60, 0x88, 0x7a, 0x13, 0x73, 0x7e, 0x29, 0x86, 0xf6, 0xe2,
	0xbb, 0xbd, 0xd8, 0x04, 0x32, 0x5d, 0xf3, 0x24, 0x77, 0x3d, 0x16, 0xa7, 0xe2, 0xe7, 0x4c, 0x31,
	0xdc, 0xb0, 0x82, 0x63, 0x8f, 0x92, 0xd4, 0x4b, 0x94, 0xff, 0xde, 0x5f, 0x32, 0x7e, 0x0f, 0x27,
	0xbd, 0xd3, 0x32, 0xa0, 0x3e, 0x20, 0x46, 0x43, 0xc5, 0x9f, 0xd0, 0x8a, 0xf1, 0x3b, 0x98, 0xed,
	0x91, 0x4c, 0xfd, 0x36, 0x74, 0x1a, 0x03, 0x46, 0x4e, 0xc5, 0x96, 0x6c, 0x3b, 0x8d, 0xb8, 0xdb,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xd5, 0x5f, 0xe8, 0xd1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrderInfoClient is the client API for OrderInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderInfoClient interface {
	GetOrderStatus(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Order, error)
	SearchOrders(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (OrderInfo_SearchOrdersClient, error)
	UpdatedOrders(ctx context.Context, opts ...grpc.CallOption) (OrderInfo_UpdatedOrdersClient, error)
	VerifyOrder(ctx context.Context, opts ...grpc.CallOption) (OrderInfo_VerifyOrderClient, error)
}

type orderInfoClient struct {
	cc *grpc.ClientConn
}

func NewOrderInfoClient(cc *grpc.ClientConn) OrderInfoClient {
	return &orderInfoClient{cc}
}

func (c *orderInfoClient) GetOrderStatus(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/ecommerce.OrderInfo/getOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderInfoClient) SearchOrders(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (OrderInfo_SearchOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderInfo_serviceDesc.Streams[0], "/ecommerce.OrderInfo/searchOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderInfoSearchOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderInfo_SearchOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderInfoSearchOrdersClient struct {
	grpc.ClientStream
}

func (x *orderInfoSearchOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderInfoClient) UpdatedOrders(ctx context.Context, opts ...grpc.CallOption) (OrderInfo_UpdatedOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderInfo_serviceDesc.Streams[1], "/ecommerce.OrderInfo/updatedOrders", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderInfoUpdatedOrdersClient{stream}
	return x, nil
}

type OrderInfo_UpdatedOrdersClient interface {
	Send(*Order) error
	CloseAndRecv() (*wrappers.StringValue, error)
	grpc.ClientStream
}

type orderInfoUpdatedOrdersClient struct {
	grpc.ClientStream
}

func (x *orderInfoUpdatedOrdersClient) Send(m *Order) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderInfoUpdatedOrdersClient) CloseAndRecv() (*wrappers.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrappers.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderInfoClient) VerifyOrder(ctx context.Context, opts ...grpc.CallOption) (OrderInfo_VerifyOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderInfo_serviceDesc.Streams[2], "/ecommerce.OrderInfo/verifyOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderInfoVerifyOrderClient{stream}
	return x, nil
}

type OrderInfo_VerifyOrderClient interface {
	Send(*Order) error
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderInfoVerifyOrderClient struct {
	grpc.ClientStream
}

func (x *orderInfoVerifyOrderClient) Send(m *Order) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderInfoVerifyOrderClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderInfoServer is the server API for OrderInfo service.
type OrderInfoServer interface {
	GetOrderStatus(context.Context, *wrappers.StringValue) (*Order, error)
	SearchOrders(*wrappers.StringValue, OrderInfo_SearchOrdersServer) error
	UpdatedOrders(OrderInfo_UpdatedOrdersServer) error
	VerifyOrder(OrderInfo_VerifyOrderServer) error
}

// UnimplementedOrderInfoServer can be embedded to have forward compatible implementations.
type UnimplementedOrderInfoServer struct {
}

func (*UnimplementedOrderInfoServer) GetOrderStatus(ctx context.Context, req *wrappers.StringValue) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (*UnimplementedOrderInfoServer) SearchOrders(req *wrappers.StringValue, srv OrderInfo_SearchOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOrders not implemented")
}
func (*UnimplementedOrderInfoServer) UpdatedOrders(srv OrderInfo_UpdatedOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdatedOrders not implemented")
}
func (*UnimplementedOrderInfoServer) VerifyOrder(srv OrderInfo_VerifyOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method VerifyOrder not implemented")
}

func RegisterOrderInfoServer(s *grpc.Server, srv OrderInfoServer) {
	s.RegisterService(&_OrderInfo_serviceDesc, srv)
}

func _OrderInfo_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderInfoServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.OrderInfo/GetOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderInfoServer).GetOrderStatus(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderInfo_SearchOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrappers.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderInfoServer).SearchOrders(m, &orderInfoSearchOrdersServer{stream})
}

type OrderInfo_SearchOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type orderInfoSearchOrdersServer struct {
	grpc.ServerStream
}

func (x *orderInfoSearchOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderInfo_UpdatedOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderInfoServer).UpdatedOrders(&orderInfoUpdatedOrdersServer{stream})
}

type OrderInfo_UpdatedOrdersServer interface {
	SendAndClose(*wrappers.StringValue) error
	Recv() (*Order, error)
	grpc.ServerStream
}

type orderInfoUpdatedOrdersServer struct {
	grpc.ServerStream
}

func (x *orderInfoUpdatedOrdersServer) SendAndClose(m *wrappers.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderInfoUpdatedOrdersServer) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderInfo_VerifyOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderInfoServer).VerifyOrder(&orderInfoVerifyOrderServer{stream})
}

type OrderInfo_VerifyOrderServer interface {
	Send(*Order) error
	Recv() (*Order, error)
	grpc.ServerStream
}

type orderInfoVerifyOrderServer struct {
	grpc.ServerStream
}

func (x *orderInfoVerifyOrderServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderInfoVerifyOrderServer) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OrderInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.OrderInfo",
	HandlerType: (*OrderInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrderStatus",
			Handler:    _OrderInfo_GetOrderStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "searchOrders",
			Handler:       _OrderInfo_SearchOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "updatedOrders",
			Handler:       _OrderInfo_UpdatedOrders_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "verifyOrder",
			Handler:       _OrderInfo_VerifyOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "order_service.proto",
}
